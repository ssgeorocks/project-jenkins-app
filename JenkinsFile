pipeline {
    agent any

    environment{
        NETLIFY_SITE_ID = '0047a380-8c98-4bf5-9552-2d7552d07518'
        NETLIFY_AUTH_TOKEN = credentials('netlify-token')
        REAC_APP_VERSION = 1.2.3
    }

    stages {
        ///* 
        //This is a comment in Jenkins.
        stage('Build w/ Docker') {
            agent{
                docker{
                    image 'node:18-alpine'
                    args '-u 0:0'
                    reuseNode true
                }
            }
            steps {
                sh '''
                ls -la
                    node --version
                    npm --version
                    npm ci
                    npm run build
                    ls -la
                '''
            }
        }

        stage('Run Tests'){
            parallel{
                stage('Unit Tests w/ Docker'){
                    agent{
                        docker{
                            image 'node:18-alpine'
                            reuseNode true
                        }
                    }
                    steps{
                        sh '''
                            echo "Starting test stage"
                            touch test_checking_htmlfile.txt
                            ls -la build >> test_checking_htmlfile.txt
                            grep "index.html" test_checking_htmlfile.txt || echo "Test Failed: File not found"
                            npm test
                        '''
                    }

                    post {
                        always {
                            junit 'jest-results/junit.xml'
                            //publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }
                }

                stage('E2E w/ Docker'){
                    agent{
                        docker{
                            image 'mcr.microsoft.com/playwright:v1.55.0-noble'
                            args '-u 0:0'
                            reuseNode true
                        }
                    }
                    steps{
                        sh '''
                            npm install serve
                            node_modules/.bin/serve -s build &
                            sleep 10
                            npx playwright test --reporter=html
                        '''
                    }

                    post {
                        always {
                            //junit 'jest-results/junit.xml'
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }
                }  
            }
        }
          
        stage('Deploy staying') {
            agent{
                docker{
                    image 'node:18-alpine'
                    reuseNode true
                    args '-u 0:0'   // ejecuta como root
                }
            }
            steps {
                sh '''
                apk add --no-cache bash curl git
                npm install netlify-cli node-jq
                node_modules/.bin/netlify --version
                echo "Deplyoing to production. Site ID NETLIFY_SITE_ID"
                node_modules/.bin/netlify status
                node_modules/.bin/netlify deploy --dir=build --json > deploy-output.json
                echo "Site ID NETLIFY_SITE_ID deployed"
                '''
                script {
                    env.STAGING_URL = sh(script: "node_modules/.bin/node-jq -r '.deploy_url' deploy-output.json", returnStdout: true)
                }

            }
        }


        stage('Staging E2E') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.55.0-noble'
                    reuseNode true
                    args '-u 0:0'
                }
            }
            environment {
                CI_ENVIRONMENT_URL = "${env.STAGING_URL}"
            }
            steps {
                sh '''
                    npx playwright test  --reporter=html
                '''
            }
            post {
                always {
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Staging E2E', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }

        //stage('Approval') {
        //    steps {
        //        timeout(time: 3, unit: 'MINUTES') {
        //            input message: 'Do you wish to deploy to production?', ok: 'Yes, I am sure!'
        //        }
        //    }
        //}

        stage('Deploy prod') {
            agent{
                docker{
                    image 'node:18-alpine'
                    reuseNode true
                    args '-u 0:0'   // ejecuta como root
                }
            }
            steps {
                sh '''
                apk add --no-cache bash curl git
                npm install netlify-cli
                node_modules/.bin/netlify --version
                echo "Deplyoing to production. Site ID NETLIFY_SITE_ID"
                node_modules/.bin/netlify status
                node_modules/.bin/netlify deploy --dir=build --prod 
                echo "Site ID NETLIFY_SITE_ID deployed"
                '''
            }
        }

        stage('E2E prod'){
            agent{
                docker{
                    image 'mcr.microsoft.com/playwright:v1.55.0-noble'
                    args '-u 0:0'
                    reuseNode true
                }
            }
            environment{
                CI_ENVIRONMENT_URL = 'https://velvety-sprite-8b705c.netlify.app'
            }

            steps{
                sh '''
                    npx playwright test --reporter=html
                '''
            }
            post {
                always {
                    //junit 'jest-results/junit.xml'
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, icon: '', keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'E2E Playwright HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }  
           
    }
}